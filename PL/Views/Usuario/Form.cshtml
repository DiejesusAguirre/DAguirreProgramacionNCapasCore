@model ML.Usuario
@{
    ViewBag.Title = "Agregar";
    Layout = "~/Views/Shared/_Layout.cshtml";

}

<div class="container">
    <h2>@ViewBag.Title</h2>
    <div class="row">
        <div class="col-md-12">

            @using (Html.BeginForm("Form", "Usuario", FormMethod.Post, new { enctype = "multipart/form-data" }))
            {
                <div class="form-horizontal">




                    <div class="form-group">

                        <div class="col-md-3">

                            @Html.LabelFor(model => model.IdUsuario, new { @class="d-none" })

                            @Html.TextBoxFor(model => model.IdUsuario, new { @class = "d-none form-control" })

                            @Html.ValidationMessageFor(model => model.IdUsuario)

                        </div>

                    </div>

                    <div class="row">
                        <hr class="hr" />
                        <div class="col-3">
                            @Html.LabelFor(model => model.Nombre)
                            <div class="input-group mb-3">
                                <span class="input-group-text"><i class="bi bi-person-square"></i></span>
                                @Html.TextBoxFor(model => model.Nombre, new { @class = "form-control", @id = "txtNombre", autocomplete = "off", @onkeypress="return SoloLetras(event, 'lblNombre')"})
                                @Html.ValidationMessageFor(model => model.Nombre)
                            </div>
                            @Html.Label("",null, new{@id="lblNombre"})
                        </div>


                        <div class="col-3">
                            @Html.LabelFor(model => model.ApellidoPaterno)
                            <div class="input-group mb-3">
                                <span class="input-group-text"><i class="bi bi-person-square"></i></span>
                                @Html.TextBoxFor(model => model.ApellidoPaterno, new { @class = "form-control", autocomplete = "off", @id="txtApellidoPaterno", @onkeypress="return SoloLetras(event, 'lblApellidoPaterno')"})
                                @Html.ValidationMessageFor(model => model.ApellidoPaterno)
                            </div>
                            @Html.Label("",null, new{@id="lblApellidoPaterno"})
                        </div>


                        <div class="col-md-3">
                            @Html.LabelFor(model => model.ApellidoMaterno)
                            <div class="input-group mb-3">
                                <span class="input-group-text"><i class="bi bi-person-square"></i></span>
                                @Html.TextBoxFor(model => model.ApellidoMaterno, new { @class = "form-control", autocomplete = "off", @id="txtApellidoMaterno", @onkeypress="return SoloLetras(event, 'lblApellidoMaterno')"})
                                @Html.ValidationMessageFor(model => model.ApellidoMaterno)
                            </div>
                            @Html.Label("",null, new{@id="lblApellidoMaterno"})
                        </div>
                    </div>



                    <div class="row">

                        <div class="col-md-3">
                            @Html.LabelFor(model => model.UserName)
                            <div class="input-group mb-3">
                                <span class="input-group-text"><i class="bi bi-person-workspace"></i></span>
                                @Html.TextBoxFor(model => model.UserName, new { @class = "form-control", autocomplete = "off" })
                                @Html.ValidationMessageFor(model => model.UserName)
                            </div>

                        </div>


                        <div class="col-md-3">
                            @Html.LabelFor(model => model.Email)
                            <div class="input-group mb-3">
                                <span class="input-group-text"><i class="bi bi-envelope-at-fill"></i></span>
                                @Html.TextBoxFor(model => model.Email, new { @class = "form-control", @placeholder = "UserName@example.com", autocomplete = "off", @id="txtEmail", @onkeypress="ValidateEmail();"})
                                @Html.ValidationMessageFor(model => model.Email)
                            </div>
                            @Html.Label("",null, new{@id="lblEmail", @style="color: red"})
                        </div>


                        <div class="col-md-3">
                            @Html.LabelFor(model => model.Password)
                            <div class="input-group mb-3">
                                <span class="input-group-text"><i class="bi bi-incognito"></i></span>
                                @Html.TextBoxFor(model => model.Password, new { @class = "form-control", @type = "password" , autocomplete = "off", @id="txtPassword", @onkeypress="ValidatePassword();"})
                                @Html.ValidationMessageFor(model => model.Password)
                            </div>
                            @Html.Label("",null, new{@id="lblPassword", @style="color: red"})
                        </div>

                        <div class="col-md-3">
                            @Html.LabelFor(model => model.ConfirmPasword)
                            <div class="input-group mb-3">
                                <span class="input-group-text"><i class="bi bi-incognito"></i></span>
                                @Html.TextBoxFor(model => model.ConfirmPasword, new { @class = "form-control", @type = "password" , autocomplete = "off", @id="txtConfirmPassword", @onkeyup="ConfirmPassword();"})
                                @Html.ValidationMessageFor(model => model.ConfirmPasword)
                            </div>
                            @Html.Label("",null, new{@id="lblConfirmPassword", @style="color: green"})
                        </div>
                    </div>




                    <div class="row">

                        <div class="col-md-3">
                            @Html.LabelFor(model => model.Telefono)
                            <div class="input-group mb-3">
                                <span class="input-group-text"><i class="bi bi-telephone"></i></span>
                                @Html.TextBoxFor(model => model.Telefono, new { @class = "form-control", autocomplete = "off", @id="txtTelefono",@onkeypress="return SoloNumeros(event, 'lblTelefono')"})
                                @Html.ValidationMessageFor(model => model.Telefono)
                            </div>
                            @Html.Label("",null,new {@id="lblTelefono"})
                        </div>


                        <div class="col-md-3">
                            @Html.LabelFor(model => model.Celular)
                            <div class="input-group mb-3">
                                <span class="input-group-text"><i class="bi bi-phone-fill"></i></span>
                                @Html.TextBoxFor(model => model.Celular, new { @class = "form-control", autocomplete = "off", @id="txtCelular", @onkeypress="return SoloNumeros(event, 'lblCelular')"})
                                @Html.ValidationMessageFor(model => model.Celular)
                                <br>
                            </div>
                            @Html.Label("",null,new {@id="lblCelular"})
                        </div>


                        <div class="col-md-3">
                            @Html.LabelFor(model => model.CURP)
                            <div class="input-group mb-3">
                                <span class="input-group-text"><i class="bi bi-file-text"></i></span>
                                @Html.TextBoxFor(model => model.CURP, new { @class = "form-control" ,  @placeholder = "Deben ser 18 caracteres", autocomplete = "off", @id="txtCURP", @onkeypress="ValidateCURP();"})
                                @Html.ValidationMessageFor(model => model.CURP)
                            </div>
                            @Html.Label("",null,new {@id="lblCURP"})
                        </div>
                    </div>



                    <div class="row">

                        @Html.LabelFor(model => model.Sexo)
                        <div class="col-md-3">

                            Femenino
                            @Html.RadioButtonFor(model => model.Sexo, "F")
                            Masculino
                            @Html.RadioButtonFor(model => model.Sexo, "M")
                            @Html.ValidationMessageFor(model => model.Sexo)

                        </div>

                        <div class="col-md-3">
                            @Html.LabelFor(model => model.FechaDeNacimiento)
                            <div class="input-group mb-3">
                                <span class="input-group-text"><i class="bi bi-calendar-date"></i></span>
                                @Html.TextBoxFor(model => model.FechaDeNacimiento, new { @class = "form-control", @id="fecha", @placeholder = "dd-mm-yyyy", autocomplete = "off"})
                                @Html.ValidationMessageFor(model => model.FechaDeNacimiento)
                            </div>
                        </div>


                        <div class="col-md-3">
                            @Html.LabelFor(model => model.ROL.IdRol)

                            @Html.DropDownListFor(model => model.ROL.IdRol, new SelectList(Model.ROL.Roles, "IdRol", "NombreROL"), "Selecciona una opción", new { @class = "form-control btn btn-info dropdown-toggle dropdown-toggle-split" })

                            @Html.ValidationMessageFor(model => model.ROL.IdRol)

                        </div>

                    </div>
                    <hr class="hr" />


                    <h4><h2><i class="bi bi-globe"></i></h2>DATOS DEL DOMICILIO</h4>
                    <hr class="hr" />

                    <div class="row">

                        <div class="col-md-3">
                            @Html.LabelFor(model => model.Direccion.Colonia.Municipio.Estado.Pais.IdPais)
                            @Html.DropDownListFor(model => model.Direccion.Colonia.Municipio.Estado.Pais.IdPais, new SelectList(Model.Direccion.Colonia.Municipio.Estado.Pais.Paises, "IdPais", "Nombre"), "Selecciona un Pais", new { id = "ddlPais", @class = "form-control btn-group shadow-0 mb-2"})
                            @Html.ValidationMessageFor(model => model.Direccion.Colonia.Municipio.Estado.Pais.IdPais)
                        </div>


                        <div class="col-md-3">
                            @Html.LabelFor(model => model.Direccion.Colonia.Municipio.Estado.IdEstado)

                            @if (Model.Direccion.Colonia.Municipio.Estado.Estados == null)
                            {
                                @Html.DropDownListFor(model => model.Direccion.Colonia.Municipio.Estado.IdEstado, new SelectList(string.Empty, "Value", "Text"), "Selecciona un Estado", htmlAttributes: new { id = "ddlEstado", @class = "form-control btn-group shadow-0 mb-2" })

                            }
                            else
                            {
                                @Html.DropDownListFor(model => model.Direccion.Colonia.Municipio.Estado.IdEstado, new SelectList(Model.Direccion.Colonia.Municipio.Estado.Estados, "IdEstado", "Nombre"), "Selecciona un Estado", htmlAttributes: new { id = "ddlEstado", @class = "form-control btn-group shadow-0 mb-2" })
                            }

                        </div>

                        <div class="col-md-3">

                            @Html.LabelFor(model => model.Direccion.Colonia.Municipio.IdMunicipio)

                            @if (Model.Direccion.Colonia.Municipio.Municipios == null)
                            {
                                @Html.DropDownListFor(model => model.Direccion.Colonia.Municipio.IdMunicipio, new SelectList(string.Empty, "Value", "Text"), "Selecciona un Municipio", htmlAttributes: new { id = "ddlMunicipio", @class = "form-control btn-group shadow-0 mb-2" })

                            }
                            else
                            {
                                @Html.DropDownListFor(model => model.Direccion.Colonia.Municipio.IdMunicipio, new SelectList(Model.Direccion.Colonia.Municipio.Municipios, "IdMunicipio", "Nombre"), "Selecciona un Municipio", htmlAttributes: new { id = "ddlMunicipio", @class = "form-control btn-group shadow-0 mb-2" })
                            }

                        </div>

                        <div class="col-md-3">

                            @Html.LabelFor(model => model.Direccion.Colonia.IdColonia)

                            @if (Model.Direccion.Colonia.Colonias == null)
                            {
                                @Html.DropDownListFor(model => model.Direccion.Colonia.IdColonia, new SelectList(string.Empty, "Value", "Text"), "Selecciona una Colonia", htmlAttributes: new { id = "ddlColonia", @class = "form-control btn-group shadow-0 mb-2" })

                            }
                            else
                            {
                                @Html.DropDownListFor(model => model.Direccion.Colonia.IdColonia, new SelectList(Model.Direccion.Colonia.Colonias, "IdColonia", "Nombre"), "Selecciona una Colonia", htmlAttributes: new { id = "ddlColonia", @class = "form-control btn-group shadow-0 mb-2" })
                            }

                        </div>
                    </div>

                    <div class="form-group">
                        <div class="row">


                            <div class="col-md-3">
                                @Html.LabelFor(model => model.Direccion.Calle)
                                <div class="input-group mb-3">
                                    <span class="input-group-text"><i class="bi bi-house-door-fill"></i></span>
                                    @Html.TextBoxFor(model => model.Direccion.Calle, new { @class = "form-control" , autocomplete = "off"})
                                    @Html.ValidationMessageFor(model => model.Direccion.Calle)
                                </div>
                            </div>


                            <div class="col-md-3">
                                @Html.LabelFor(model => model.Direccion.NumeroInterior)

                                @Html.TextBoxFor(model => model.Direccion.NumeroInterior, new { @class = "form-control", autocomplete = "off" })

                                @Html.ValidationMessageFor(model => model.Direccion.NumeroInterior)

                            </div>

                            <div class="col-md-3">

                                @Html.LabelFor(model => model.Direccion.NumeroExterior)

                                @Html.TextBoxFor(model => model.Direccion.NumeroExterior, new { @class = "form-control" , autocomplete = "off"})

                                @Html.ValidationMessageFor(model => model.Direccion.NumeroExterior)

                            </div>

                            <div class="col-md-3">

                                @Html.LabelFor(model => model.Direccion.IdDireccion, new { @class = "d-none" })

                                @Html.TextBoxFor(model => model.Direccion.IdDireccion, new { @class = "d-none form-control" })

                                @Html.ValidationMessageFor(model => model.Direccion.IdDireccion)

                            </div>
                        </div>
                    </div>
                    <hr class="hr" />
                    <div class=" offset-md-12">

                        @Html.LabelFor(model => model.Imagen)
                        <div>
                            <input type="file" name="IfImage" id="IfImage" onchange="readURL(this);" />
                        </div>
                        @if (Model.Imagen != null)
                        {
                            <img id="ImagenPreview" src="data:image/*;base64,@Model.Imagen" style="height:180px; width:200px;" class="img-thumbnail" />
                        }
                        else
                        {
                            <img id="ImagenPreview" src="~/UsuarioSinFoto.png" style="height:auto; width:auto;" class="img-thumbnail" />
                        }

                        @Html.ValidationMessageFor(model => model.Imagen)
                    </div>
                    @Html.HiddenFor(model => model.Imagen)

                    <hr class="hr" />
                    <div class="form-group">

                        <div class="col-md-3">

                            <input type="submit" value="Guardar" class="btn btn-success" />

                            @Html.ActionLink("Regresar", "Index", "Usuario", htmlAttributes: new { @class = "btn btn-danger" })

                        </div>

                    </div>

                </div>
            }



        </div>
    </div>
</div>

@section Scripts
    {
    <script src="~/lib/jquery/dist/jquery.js"></script>
    <link rel="stylesheet" href="//code.jquery.com/ui/1.13.2/themes/base/jquery-ui.css">
    <link rel="stylesheet" href="/resources/demos/style.css">
    <script src="https://code.jquery.com/jquery-3.6.0.js"></script>
    <script src="https://code.jquery.com/ui/1.13.2/jquery-ui.js"></script>
    <script type="text/javascript">
        $(document).ready(function () {

            $(function () {
                $("#fecha").datepicker({
                    dateFormat: 'dd-mm-yy',
                    changeMonth: true,
                    changeYear: true,
                    yearRange: '-100:+0',
                    maxDate: '0'
                });
            });

            //Previsualizacion de laImagen
            function readURL(input) {

                if (input.files && input.files[0]) {
                    var reader = new FileReader();
                    reader.onload = function (e) {
                        $('#ImagenPreview').attr('src', e.target.result);
                    };
                    reader.readAsDataURL(input.files[0]);
                }
            }

            $("#IfImage").change(function () {
                // Código a ejecutar cuando se detecta un cambio de archivO
                readURL(this);
            });

            //Validar que sea PNG o JPG
            $("#IfImage").change(function () {
                let input = $(this);
                let extencion = input.val().split(".").pop().toLowerCase();
                if (input.val() != "") {
                    if (extencion != "jpg" && extencion != "png") {
                        input.replaceWith(input.val('').clone(true));
                        alert("imagen no permitida");
                    }
                } else {
                    alert("favor de cargar una imagen");
                }
            });


            //DropDownList Pais-Estado
            $("#ddlPais").change(function () {
                $("#ddlEstado").empty();
                $("#ddlMunicipio").empty();
                $("#ddlColonia").empty();
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("GetEstado")',
                    dataType: 'json',
                    data: { IdPais: $("#ddlPais").val() },
                    success: function (estados) {
                        $("#ddlEstado").append('<option value="0">' + 'Seleccione una opción' + '</option>');
                        $.each(estados, function (i, estados) {
                            $("#ddlEstado").append('<option value="'
                                + estados.idEstado + '">'
                                + estados.nombre + '</option>');
                        });
                    },
                    error: function (ex) {
                        alert('Failed.' + ex);
                    }
                });
            });


            //DropDownList Estado-Municipio
            $("#ddlEstado").change(function () {
                $("#ddlMunicipio").empty();
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("GetMunicipio")',
                    dataType: 'json',
                    data: { IdEstado: $("#ddlEstado").val() },
                    success: function (municipios) {
                        $("#ddlMunicipio").append('<option value="0">' + 'Seleccione una opción' + '</option>');
                        $.each(municipios, function (i, municipios) {
                            $("#ddlMunicipio").append('<option value="'
                                + municipios.idMunicipio + '">'
                                + municipios.nombre + '</option>');
                        });
                    },
                    error: function (ex) {
                        alert('Failed.' + ex);
                    }
                });
            });


            //DropDownList Municipio
            $("#ddlMunicipio").change(function () {
                $("#ddlColonia").empty();
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("GetColonia")',
                    dataType: 'json',
                    data: { IdMunicipio: $("#ddlMunicipio").val() },
                    success: function (colonias) {
                        $("#ddlColonia").append('<option value="0">' + 'Seleccione una opción' + '</option>');
                        $.each(colonias, function (i, colonias) {
                            $("#ddlColonia").append('<option value="'
                                + colonias.idColonia + '">'
                                + colonias.nombre + '</option>');
                        });
                    },
                    error: function (ex) {
                        alert('Failed.' + ex);
                    }
                });
            });
        });

        //Metodo para Validar con puros numeros
        function SoloNumeros(e, controlId) {
            var caracter = e.key;
            if (!/^[0-9]/g.test(caracter)) {
                
                $('#' + controlId).text("Solo se aceptan numeros y deben ser 10 digitos");
                $('#' + controlId).css({ "color": "red" });
                return false;
            }
            else {
                $('#' + controlId).text("");
                return true;
            }
        }

        //Metodo para Validar con puras Letras
        function SoloLetras(e, controlId) {
            var caracter = e.key;
            if (!/[A-Za-z ]/g.test(caracter)) {
                $('#' + controlId).text("Solo se aceptan letras minusculas o mayusculas");
                $('#' + controlId).css({ "color": "red" });
                return false;
            }
            else {
                $('#' + controlId).text("");
                return true;
            }
        }

        //Metodo para Validar un email
        function ValidateEmail() {
            var email = document.getElementById("txtEmail").value;
            var lblError = document.getElementById("lblEmail");
            lblError.innerHTML = "";
            var expr = /^([a-zA-Z0-9_.+-])+\@@(([a-zA-Z0-9-])+\.)+([a-zA-Z0-9]{2,4})+$/;
        if (!expr.test(email)) {
            lblError.innerHTML = "El correo es incorrecto";
            
        }
    }

        //Metodo para Password
        function ValidatePassword() {
            var pass = document.getElementById("txtPassword").value;
            var strongRegex = /^.*(?=.{8,})(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[@@#$%&]).*$/;
            if (!strongRegex.test(pass)) {
                $('#lblPassword').text("Contraseña incorrecta: Debe tener una Mayuscula al menos, Una minuscula, Un simbolo Especial: @@/*.");
                $('#lblPassword').css({ "color": "red" });
                return false;
            }
            else {
                $('#lblPassword').text("");
                return true;
            }
        }

        //Metodo para Confirmar Contraseña
        function ConfirmPassword() {
            var password = $("#txtPassword").val();
            var confirmPassword = $("#txtConfirmPassword").val();
            if (password != confirmPassword)
                $("#lblConfirmPassword").html("Tu Contraseña no coincide");
            else
                $("#lblConfirmPassword").html("Es correcto");
        }

        //Metodo para validar CURP
        function ValidateCURP() {
            var CURP = document.getElementById("txtCURP").value;
            var lblError = document.getElementById("lblCURP");
            lblError.innerHTML = "";
            var expr = /^([A-Z][AEIOUX][A-Z]{2}\d{2}(?:0[1-9]|1[0-2])(?:0[1-9]|[12]\d|3[01])[HM](?:AS|B[CS]|C[CLMSH]|D[FG]|G[TR]|HG|JC|M[CNS]|N[ETL]|OC|PL|Q[TR]|S[PLR]|T[CSL]|VZ|YN|ZS)[B-DF-HJ-NP-TV-Z]{3}[A-Z\d])(\d)$/;
            if (!expr.test(CURP)) {
                lblError.innerHTML = "El CURP es incorrecto";

            }
        }


        //function ValidateCURP() {
        //    var curp = document.getElementById("txtCURP").value;
        //    var strongRegex = /^([A-Z][AEIOUX][A-Z]{2}\d{2}(?:0[1-9]|1[0-2])(?:0[1-9]|[12]\d|3[01])[HM](?:AS|B[CS]|C[CLMSH]|D[FG]|G[TR]|HG|JC|M[CNS]|N[ETL]|OC|PL|Q[TR]|S[PLR]|T[CSL]|VZ|YN|ZS)[B-DF-HJ-NP-TV-Z]{3}[A-Z\d])(\d)$/;
            
        //    if (strongRegex.test(curp)) {
        //        $('#lblCURP').text("");
        //        return true;
        //    }
        //    else {
        //        $('#lblCURP').text("Ingresa un CURP valido");
        //        $('#lblCURP').css({ "color": "red" });
        //        return false;
        //    }
        //}

    </script>
}
